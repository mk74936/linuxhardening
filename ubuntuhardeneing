#!/bin/bash
set -e

# Update and Upgrade System
echo "Updating and upgrading system..."
sudo apt-get update -y && sudo apt-get upgrade -y


# Force upgrade for held-back packages (if needed)
sudo apt-get dist-upgrade -y

# Function to apply sysctl settings
apply_sysctl_setting() {
  local key=$1
  local value=$2
  grep -q "^${key}" /etc/sysctl.conf && sudo sed -i "s|^${key}.*|${key} = ${value}|" /etc/sysctl.conf || echo "${key} = ${value}" | sudo tee -a /etc/sysctl.conf
  sudo sysctl -w ${key}=${value}
}

# Disable the installation and use of file systems that are not required (freevxfs)
echo "install freevxfs /bin/true" | sudo tee /etc/modprobe.d/disable-freevxfs.conf
sudo modprobe -r freevxfs

# Ensure packet redirect sending is disabled
apply_sysctl_setting net.ipv4.conf.all.send_redirects 0
apply_sysctl_setting net.ipv4.conf.default.send_redirects 0

# Appropriate ciphers should be used for SSH (Ciphers aes128-ctr,aes192-ctr,aes256-ctr)
sudo sed -i 's/^#Ciphers.*/Ciphers aes128-ctr,aes192-ctr,aes256-ctr/' /etc/ssh/sshd_config
sudo systemctl restart ssh

# Disable support for RDS
echo "install rds /bin/true" | sudo tee /etc/modprobe.d/disable-rds.conf
sudo modprobe -r rds

# Ensure rsync service is not enabled
sudo systemctl disable rsync --now || echo "Rsync service not installed"

# All bootloaders should have password protection enabled
sudo grub-mkpasswd-pbkdf2 <<EOF > /tmp/grub-pass
YourStrongPassword
YourStrongPassword
EOF
GRUB_PASS=$(grep -oP '(?<=PBKDF2 hash of your password is ).*' /tmp/grub-pass)
sudo echo "set superusers=\"root\"" >> /etc/grub.d/40_custom
sudo echo "password_pbkdf2 root $GRUB_PASS" >> /etc/grub.d/40_custom
sudo update-grub
rm -f /tmp/grub-pass

# Ensure mounting of USB storage devices is disabled
echo "install usb-storage /bin/true" | sudo tee /etc/modprobe.d/disable-usb-storage.conf
sudo modprobe -r usb-storage

# Ensure minimum days between password changes is 7 or more
sudo sed -i 's/^PASS_MIN_DAYS.*/PASS_MIN_DAYS   7/' /etc/login.defs

# Enable Logging
apply_sysctl_setting net.ipv4.conf.all.log_martians 1
apply_sysctl_setting net.ipv4.conf.default.log_martians 1

# Ensure password creation requirements are configured
sudo apt-get install libpam-pwquality -y
sudo sed -i 's/^# minlen =.*/minlen = 14/' /etc/security/pwquality.conf
sudo sed -i 's/^# dcredit =.*/dcredit = -1/' /etc/security/pwquality.conf
sudo sed -i 's/^# ucredit =.*/ucredit = -1/' /etc/security/pwquality.conf
sudo sed -i 's/^# lcredit =.*/lcredit = -1/' /etc/security/pwquality.conf
sudo sed -i 's/^# ocredit =.*/ocredit = -1/' /etc/security/pwquality.conf

# Ensure lockout for failed password attempts is configured
# sudo echo 'auth required pam_tally2.so deny=5 unlock_time=900' | sudo tee -a /etc/pam.d/common-auth

# Disable the installation and use of file systems that are not required (hfs)
echo "install hfs /bin/true" >> /etc/modprobe.d/hfs.conf
rmmod hfs 2>/dev/null

# Set /etc/gshadow file permissions to 0400
chmod 0400 /etc/gshadow

# Ensure permissions on /etc/cron.daily are configured
chmod -R go-rwx /etc/cron.daily

# Disable the installation and use of file systems that are not required (jffs2)
echo "install jffs2 /bin/true" >> /etc/modprobe.d/jffs2.conf
rmmod jffs2 2>/dev/null

# Ensure at/cron is restricted to authorized users
chmod 600 /etc/cron.allow
chmod 600 /etc/at.allow
touch /etc/cron.allow /etc/at.allow
chown root:root /etc/cron.allow /etc/at.allow
rm -f /etc/cron.deny /etc/at.deny

# Enable logging of martian packets (those with impossible addresses)
echo "net.ipv4.conf.all.log_martians = 1" >> /etc/sysctl.conf
echo "net.ipv4.conf.default.log_martians = 1" >> /etc/sysctl.conf
sysctl -p

# Disable root login via SSH
sed -i '/^PermitRootLogin/c\PermitRootLogin no' /etc/ssh/sshd_config
systemctl restart sshd

# Remove unnecessary accounts
awk -F: '($3 < 1000) {print $1}' /etc/passwd | grep -vE "^(root|sync|shutdown|halt)" | while read -r user; do userdel -r "$user"; done

# Enable source validation by reverse path
sysctl -w net.ipv4.conf.default.rp_filter=1
sysctl -w net.ipv4.conf.all.rp_filter=1
echo "net.ipv4.conf.default.rp_filter = 1" >> /etc/sysctl.conf
echo "net.ipv4.conf.all.rp_filter = 1" >> /etc/sysctl.conf

# Disable DCCP
echo "install dccp /bin/true" >> /etc/modprobe.d/dccp.conf
rmmod dccp 2>/dev/null

# Remove unnecessary packages
apt-get autoremove -y

# Ensure permissions on /etc/cron.hourly are configured
chmod 700 /etc/cron.hourly

# Ensure SSH LoginGraceTime is set to one minute or less
sed -i '/^LoginGraceTime/c\LoginGraceTime 1m' /etc/ssh/sshd_config
systemctl restart sshd

# Sending ICMP redirects should be disabled for all interfaces
sysctl -w net.ipv4.conf.default.accept_redirects=0
sysctl -w net.ipv4.conf.all.accept_redirects=0
echo "net.ipv4.conf.default.accept_redirects = 0" >> /etc/sysctl.conf
echo "net.ipv4.conf.all.accept_redirects = 0" >> /etc/sysctl.conf

# Disable the installation and use of file systems that are not required (hfsplus)
modprobe -r hfsplus
echo "install hfsplus /bin/true" >> /etc/modprobe.d/hfsplus.conf

# Ensure SCTP is disabled
modprobe -r sctp
echo "install sctp /bin/true" >> /etc/modprobe.d/sctp.conf

# Disable the installation and use of file systems that are not required (cramfs)
modprobe -r cramfs
echo "install cramfs /bin/true" >> /etc/modprobe.d/cramfs.conf

# Disable accepting source routed packets
echo "net.ipv4.conf.default.accept_source_route = 0" >> /etc/sysctl.conf
sysctl -w net.ipv4.conf.default.accept_source_route=0
sysctl -w net.ipv4.conf.all.accept_source_route=0

echo "net.ipv4.conf.all.accept_source_route = 0" >> /etc/sysctl.conf

# Ensure permissions on /etc/cron.monthly are configured
chmod 700 /etc/cron.monthly

# Ensure password reuse is limited
if ! grep -q "^password.*pam_pwhistory.so" /etc/pam.d/common-password; then
    echo "password required pam_pwhistory.so remember=5" >> /etc/pam.d/common-password
fi

# Ensure SSH access is limited
echo "AllowUsers azureuser" >> /etc/ssh/sshd_config  # Replace 'azureuser' with required username(s)
systemctl restart sshd

# Ensure permissions on bootloader config are configured
chmod 600 /boot/grub/grub.cfg

# Set default umask for all users to 077 in /etc/login.defs
sed -i 's/^UMASK.*/UMASK 077/' /etc/login.defs

# Enable SSH warning banner
echo "Authorized use only. Unauthorized access is prohibited." > /etc/issue.net
sed -i 's|^#Banner.*|Banner /etc/issue.net|' /etc/ssh/sshd_config
systemctl restart sshd

# Ensure permissions on /etc/ssh/sshd_config are configured
chmod 600 /etc/ssh/sshd_config
chown root:root /etc/ssh/sshd_config

# Ensure /etc/gshadow file permissions are set to 0400
chmod 0400 /etc/gshadow
chown root:root /etc/gshadow

# Restrict core dumps
echo "* hard core 0" >> /etc/security/limits.conf
echo "fs.suid_dumpable = 0" >> /etc/sysctl.conf
sysctl -p

# Disable TIPC (Transparent Inter-Process Communication)
echo "install tipc /bin/true" > /etc/modprobe.d/tipc.conf
rmmod tipc || true

# Disable ICMP redirects for all interfaces
echo "net.ipv4.conf.default.secure_redirects = 0" >> /etc/sysctl.conf
echo "net.ipv4.conf.all.secure_redirects = 0" >> /etc/sysctl.conf
sysctl -p

# Ensure permissions on /etc/cron.d are configured
chmod 600 /etc/cron.d
chown root:root /etc/cron.d

# Function to set permissions on a file
set_file_permissions() {
  local file=$1
  local permissions=$2
  if [ -e "$file" ]; then
    chmod $permissions "$file"
    echo "Set permissions $permissions on $file."
  else
    echo "File $file not found."
  fi
}

# Set /etc/shadow file permissions to 0400
set_file_permissions /etc/shadow 0400

# Set /etc/passwd- file permissions to 0600
set_file_permissions /etc/passwd- 0600

# Configure SSH Idle Timeout Interval
SSH_CONFIG="/etc/ssh/sshd_config"
sed -i '/^ClientAliveInterval/d' $SSH_CONFIG
sed -i '/^ClientAliveCountMax/d' $SSH_CONFIG
echo "ClientAliveInterval 300" >> $SSH_CONFIG
echo "ClientAliveCountMax 0" >> $SSH_CONFIG
systemctl restart sshd
echo "Configured SSH Idle Timeout Interval."

# Restrict access to the root account via su to the 'root' group
groupadd -f root
chgrp root /bin/su
chmod 4750 /bin/su
echo "Restricted access to the root account via su to the 'root' group."

# nsure system accounts are non-login
awk -F: '($3 < 1000 && $7 != "/usr/sbin/nologin" && $7 != "/bin/false") {print $1}' /etc/passwd | while read -r user; do
  usermod -s /usr/sbin/nologin "$user"
  echo "Set non-login shell for system account: $user."
done

# Set /etc/shadow- file permissions to 0400
set_file_permissions /etc/shadow- 0400

# Ensure permissions on /etc/cron.weekly are configured
set_file_permissions /etc/cron.weekly 0700

# Ensure only approved MAC algorithms are used
sed -i '/^MACs/d' $SSH_CONFIG
echo "MACs hmac-sha2-256,hmac-sha2-512" >> $SSH_CONFIG
systemctl restart sshd
echo "Configured approved MAC algorithms for SSH."

# Enable source validation by reverse path for all interfaces
SYSCTL_CONF="/etc/sysctl.conf"
sed -i '/^net.ipv4.conf.all.rp_filter/d' $SYSCTL_CONF
echo "net.ipv4.conf.all.rp_filter = 1" >> $SYSCTL_CONF
sysctl -p
echo "Enabled source validation by reverse path for all interfaces."

# Ensure user home directories are mode 750 or more restrictive
awk -F: '($3 >= 1000 && $7 != "/usr/sbin/nologin" && $7 != "/bin/false") {print $6}' /etc/passwd | while read -r dir; do
  if [ -d "$dir" ]; then
    chmod 750 "$dir"
    echo "Set permissions 750 on home directory: $dir."
  fi
done

# Function to check and update mount options for partitions
set_mount_option() {
    local partition=$1
    local option=$2

    # Check if the option is already set
    if ! grep -q "$partition" /etc/fstab || ! grep "$partition" /etc/fstab | grep -q "$option"; then
        # If not, update /etc/fstab to add the option
        echo "Adding $option to $partition in /etc/fstab"
        sed -i "/$partition/ s/\(defaults\)/\1,$option/" /etc/fstab
    else
        echo "$option already set on $partition"
    fi
}

# Ensure noexec is set on /var/tmp partition
set_mount_option "/var/tmp" "noexec"

# Ensure nosuid is set on /var/tmp partition
set_mount_option "/var/tmp" "nosuid"

# Ensure nosuid is set on /tmp partition
set_mount_option "/tmp" "nosuid"

# Ensure noexec is set on /dev/shm partition
set_mount_option "/dev/shm" "noexec"

# Ensure nodev is set on /tmp partition
set_mount_option "/tmp" "nodev"

# Ensure nodev is set on /var/tmp partition
set_mount_option "/var/tmp" "nodev"

# Ensure nodev is set on /home partition
set_mount_option "/home" "nodev"

# Remount the partitions to apply changes
echo "Remounting affected partitions..."
mount -o remount /var/tmp /tmp /dev/shm /home

# Final cleanup
echo "Script execution completed. System hardened successfully."
